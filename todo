TODO:

- change DummyKit components to "box" with varying sizes
- add code for Kit.pack() and class Page
- add code for Kit.render()

- add code for nested Components

- add a component that will display an "ell" shape, with scaling, rotation,
	and translation, and generate the PDF for it.
	- add Ell, Kit, Page classes as needed
	- add code to assign components to positions on pages

- create a "generate.js" file and a "generate.html" file, each with
    bare-minimum code to load the libraries, create a kit, and render it,
    make sure works correctly both ways

- expand the example into a simple house

- get simple HTML and JS hosted on XNet,
    figure out how URLs work to make it testable from local copy

- add input-options mechanism for setting params from either
    the web interface or the API level (includes scale/HO, etc.)

- figure out how to fill w/ a "texture" (code)
	- figure out how to crop texture filling

- add a bunch of color capability


DONE:
- researched Python-vs-JavaScript, decided to go with JS because it will
    allow users to generate PDF files without installing *anything*
    on their computers (and without me doing complex hosting of back-end
    computations)
- researched and chose jspdf library for PDF generation
- got node.js installed on both ocelot and neofelis
- reviewed enough JS to start writing code
- got some skeleton code working on HTML to generate PDF with JS
- got skeleton code to work in node.js to generate PDF with JS
    (Now have proof-of-concept that JS and jspdf will work)
- researched and chose jest for unit-testing, installed on neofelis and ocelot
- got some skeleton test code working
- removed all references to paper-scissors-fun.com, replaced with
    paperscissorsfun.com, which is what I have registered at namecheap
- got git working on neofelis
- got git working on ocelot (so I can also work downstairs)
- researched matrix multiplication
- researched using matrix representation of affine transformations
- checked syntax for private members (_ just like python)
- researched, chose, installed a JS linter: jshint
- created psflib.js and psflib.test.js w/ initial fragments of code
- looked up variable parameters, added code to handle inch-only or ft+in
- cleaned up indentation to match the usual JS conventions
- added Distance class (with tests) to enforce measurement consistency
- started adding Point code for plus() and times()
- added scale factors (HO etc.)
- added transform.apply() code and tests
- added transform.compose() code and tests
- added toString() methods
- fixed up "doit" script to run tests only if jshint succeeds
- added ReflectAroundXAxis
- looked up bin-packing, found some JS code on github, downloaded it
- wired "bin-pack" package into psflib code, and added a sanity test
- changed "Point" to "DP" ("DistancePair"), use for pt, vector, size
- split tests for 3rd-party "bin-sort" into separate file for isolation
- added initial bones for Page, Kit
- added basic logic for Kit


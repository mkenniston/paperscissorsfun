TODO:

- fix all code (esp. tests) to use "mm" instead of "m" as internal base unit
- add code for Kit.render()
    - create Component.factory for point (and maybe vector and size?)
    - rework DP to *not* use parent pointer and lazy-eval, instead do
        final transform inside draw* methods
    - use Component.draw* (Lines, OpenPolygon, ClosedPolygon,
	FilledPolygon, etc)
    - use a rectangle "box" with diag lines crossing and color fill
	and interior up-arrow
- add code for nested Components
	test with translate, scale, rotate of subcomponents

- learn to mock pdf class, write appropriate tests

- create a BasicHouse class to demonstrate/test all the main features
- add in-line doc to every function explaining the args

- add a feature to Component so it knows its own bounding box, and
    auto-verifies that all drawing stays "inside the lines", and
    all sub-components stay inside the bounding box.
- create a "generate.js" file and a "generate.html" file, each with
    bare-minimum code to load the libraries, create a kit, and render it,
    make sure works correctly both ways

- get simple HTML and JS hosted on XNet (or Google Drive/Blogger/?)
    figure out how URLs work to make it testable from local copy

- add input-options mechanism for setting params from either
    the web interface or the API level (includes scale/HO, etc.)

- figure out how to fill w/ a "texture" (code)
	- figure out how to crop texture filling

- add a bunch of color capability
- figure out how to do "annotations" embedded in PDF file (to record
	creation-date and all options, i.e. how to reproduce this file).
- maybe add "option" to select different paper sizes
- add "themes" for collections of Kits
- consider making special code to do comples roof hips, design roofs as
	seaparate Pieces that are glued on top of roof "rafters"
- consider having a way to save options in a file and reload later
	(esp. in web interface, reset defaults in web page)


DONE:
- researched Python-vs-JavaScript, decided to go with JS because it will
    allow users to generate PDF files without installing *anything*
    on their computers (and without me doing complex hosting of back-end
    computations)
- researched and chose jspdf library for PDF generation
- got node.js installed on both ocelot and neofelis
- reviewed enough JS to start writing code
- got some skeleton code working on HTML to generate PDF with JS
- got skeleton code to work in node.js to generate PDF with JS
    (Now have proof-of-concept that JS and jspdf will work)
- researched and chose jest for unit-testing, installed on neofelis and ocelot
- got some skeleton test code working
- removed all references to paper-scissors-fun.com, replaced with
    paperscissorsfun.com, which is what I have registered at namecheap
- got git working on neofelis
- got git working on ocelot (so I can also work downstairs)
- researched matrix multiplication
- researched using matrix representation of affine transformations
- checked syntax for private members (_ just like python)
- researched, chose, installed a JS linter: jshint
- created psflib.js and psflib.test.js w/ initial fragments of code
- looked up variable parameters, added code to handle inch-only or ft+in
- cleaned up indentation to match the usual JS conventions
- added Distance class (with tests) to enforce measurement consistency
- started adding Point code for plus() and times()
- added scale factors (HO etc.)
- added transform.apply() code and tests
- added transform.compose() code and tests
- added toString() methods
- fixed up "doit" script to run tests only if jshint succeeds
- added ReflectAroundXAxis
- looked up bin-packing, found some JS code on github, downloaded it
- wired "bin-pack" package into psflib code, and added a sanity test
- changed "Point" to "DP" ("DistancePair"), use for pt, vector, size
- split tests for 3rd-party "bin-sort" into separate file for isolation
- added initial bones for Page, Kit
- added basic logic for Kit
- added basic logic for page-packing
- added a couple more Distance units
- added code for class Page and initial code for render()
- added framework for annotation (to preserve creation data)

